Título: Projeto Lógico de Banco de Dados – E-commerce

Descrição:
Este projeto lógico modela o banco de dados de um e-commerce, contemplando clientes pessoa física (PF) e jurídica (PJ), múltiplas formas de pagamento, controle de pedidos e entregas com status e código de rastreio, além de fornecedores, produtos e estoque.
O modelo lógico reflete relacionamentos presentes no EER, garantindo integridade referencial e constraints coerentes com o cenário.

Destaques do modelo:

Clientes PF/PJ: cada conta pode ser PF ou PJ, nunca ambos.

Pagamentos múltiplos: um cliente pode cadastrar mais de uma forma de pagamento.

Pedidos: com status, data, valor total e detalhes de entrega.

Entregas: rastreáveis via código de rastreio e status.

Produtos e fornecedores: estoque e relação entre fornecedores e produtos.

Queries complexas: envolvendo filtros, expressões derivadas, agrupamentos e joins.

2️⃣ Script SQL – Criação do Esquema
-- ============================
-- TABELAS PRINCIPAIS
-- ============================

-- Clientes PF ou PJ
CREATE TABLE Cliente (
    id_cliente INT PRIMARY KEY AUTO_INCREMENT,
    tipo_cliente ENUM('PF','PJ') NOT NULL,
    nome VARCHAR(150) NOT NULL,
    email VARCHAR(100) UNIQUE,
    cnpj_cpf VARCHAR(20) UNIQUE NOT NULL,
    CHECK (tipo_cliente IN ('PF','PJ'))
);

-- Formas de pagamento
CREATE TABLE Pagamento (
    id_pagamento INT PRIMARY KEY AUTO_INCREMENT,
    id_cliente INT NOT NULL,
    tipo_pagamento VARCHAR(50) NOT NULL,
    numero_cartao VARCHAR(20),
    validade DATE,
    FOREIGN KEY (id_cliente) REFERENCES Cliente(id_cliente)
);

-- Fornecedores
CREATE TABLE Fornecedor (
    id_fornecedor INT PRIMARY KEY AUTO_INCREMENT,
    nome VARCHAR(150) NOT NULL,
    cnpj VARCHAR(20) UNIQUE NOT NULL,
    email VARCHAR(100)
);

-- Produtos
CREATE TABLE Produto (
    id_produto INT PRIMARY KEY AUTO_INCREMENT,
    nome VARCHAR(150) NOT NULL,
    preco DECIMAL(10,2) NOT NULL,
    id_fornecedor INT NOT NULL,
    FOREIGN KEY (id_fornecedor) REFERENCES Fornecedor(id_fornecedor)
);

-- Estoque
CREATE TABLE Estoque (
    id_estoque INT PRIMARY KEY AUTO_INCREMENT,
    id_produto INT NOT NULL,
    quantidade INT NOT NULL,
    FOREIGN KEY (id_produto) REFERENCES Produto(id_produto)
);

-- Pedidos
CREATE TABLE Pedido (
    id_pedido INT PRIMARY KEY AUTO_INCREMENT,
    id_cliente INT NOT NULL,
    data_pedido DATE NOT NULL,
    valor_total DECIMAL(10,2),
    FOREIGN KEY (id_cliente) REFERENCES Cliente(id_cliente)
);

-- Itens do pedido
CREATE TABLE ItemPedido (
    id_item INT PRIMARY KEY AUTO_INCREMENT,
    id_pedido INT NOT NULL,
    id_produto INT NOT NULL,
    quantidade INT NOT NULL,
    preco_unitario DECIMAL(10,2) NOT NULL,
    FOREIGN KEY (id_pedido) REFERENCES Pedido(id_pedido),
    FOREIGN KEY (id_produto) REFERENCES Produto(id_produto)
);

-- Entrega
CREATE TABLE Entrega (
    id_entrega INT PRIMARY KEY AUTO_INCREMENT,
    id_pedido INT NOT NULL,
    status ENUM('Pendente','Em Transporte','Entregue','Cancelado') NOT NULL,
    codigo_rastreio VARCHAR(50) UNIQUE,
    FOREIGN KEY (id_pedido) REFERENCES Pedido(id_pedido)
);

3️⃣ Inserção de Dados de Teste
-- Clientes
INSERT INTO Cliente (tipo_cliente, nome, email, cnpj_cpf)
VALUES
('PF','João Silva','joao@email.com','12345678901'),
('PJ','Tech Solutions','contato@techsol.com','12345678000199');

-- Pagamentos
INSERT INTO Pagamento (id_cliente, tipo_pagamento, numero_cartao, validade)
VALUES
(1,'Cartão de Crédito','1111222233334444','2026-12-31'),
(1,'Boleto',NULL,NULL),
(2,'Cartão de Crédito','5555666677778888','2027-06-30');

-- Fornecedores
INSERT INTO Fornecedor (nome, cnpj, email)
VALUES
('Fornecedor A','11122233000100','fornA@email.com'),
('Fornecedor B','22233344000155','fornB@email.com');

-- Produtos
INSERT INTO Produto (nome, preco, id_fornecedor)
VALUES
('Notebook',3500.00,1),
('Mouse',150.00,1),
('Teclado',200.00,2);

-- Estoque
INSERT INTO Estoque (id_produto, quantidade)
VALUES
(1,10),
(2,50),
(3,30);

-- Pedidos
INSERT INTO Pedido (id_cliente, data_pedido, valor_total)
VALUES
(1,'2025-09-16',3800.00),
(2,'2025-09-15',200.00);

-- Itens do pedido
INSERT INTO ItemPedido (id_pedido, id_produto, quantidade, preco_unitario)
VALUES
(1,1,1,3500.00),
(1,2,2,150.00),
(2,3,1,200.00);

-- Entrega
INSERT INTO Entrega (id_pedido, status, codigo_rastreio)
VALUES
(1,'Em Transporte','TRK123456'),
(2,'Pendente','TRK654321');

4️⃣ Queries Exemplos
4.1 Recuperações simples com SELECT
SELECT nome, email FROM Cliente;

4.2 Filtros com WHERE
SELECT nome, email 
FROM Cliente
WHERE tipo_cliente = 'PF';

4.3 Expressões para atributos derivados
SELECT id_pedido, valor_total, valor_total * 0.10 AS imposto
FROM Pedido;

4.4 Ordenações com ORDER BY
SELECT nome, preco
FROM Produto
ORDER BY preco DESC;

4.5 Filtros em grupos com HAVING
SELECT id_cliente, COUNT(id_pedido) AS total_pedidos
FROM Pedido
GROUP BY id_cliente
HAVING COUNT(id_pedido) > 0;

4.6 Junções entre tabelas
-- Produtos e fornecedores
SELECT p.nome AS produto, f.nome AS fornecedor, e.quantidade
FROM Produto p
JOIN Fornecedor f ON p.id_fornecedor = f.id_fornecedor
JOIN Estoque e ON p.id_produto = e.id_produto;

-- Pedidos e clientes
SELECT c.nome AS cliente, p.id_pedido, p.valor_total, e.status
FROM Pedido p
JOIN Cliente c ON p.id_cliente = c.id_cliente
JOIN Entrega e ON p.id_pedido = e.id_pedido;


✅ Observações finais:

O modelo lógico já reflete PJ/PF, pagamentos múltiplos e entregas com status e rastreio.

As queries contemplam todos os tópicos solicitados: SELECT, WHERE, atributos derivados, ORDER BY, HAVING, JOIN.

O projeto pode ser subido no GitHub com README explicativo e scripts SQL para avaliação.
